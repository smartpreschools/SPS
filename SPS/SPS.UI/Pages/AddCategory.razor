@page "/categorydata"
@using SPS.UI.Data;
<PageTitle>User Data</PageTitle>
@inject HttpClient Http
@inject IConfiguration Configuration


<h1>Categories</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>CategoryName</th>
                <th>CategoryDesc</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in cateorylist)
            {
                <tr>
                    <td>@category.CategoryName</td>
                    <td>@category.CategoryDesc</td>
                    <td>
                        <a href='/user/edit/@category.CategoryId' class="link-dark" role="button">
                            Edit
                        </a>
                        <a href='/user/delete/@category.CategoryId' class="link-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
                    PageIndex="@State.PageIndex"
                    Radius="3"
                    OnSelectedPage="@SelectedPage">
            </Pagination>
        </tfoot>
    </table>

}

@code {
  [CascadingParameter]
    PageIndexStateProvider State { get; set; }
    
  
    private int itemsPerPage = 5;
    private int totalPages = 1;

    private IEnumerable<CategoryDetailcs> categories = null;
    private IEnumerable<CategoryDetailcs> cateorylist = Enumerable.Empty<CategoryDetailcs>();
    protected override async Task OnInitializedAsync()
    {
        categories = await Http.GetFromJsonAsync<List<CategoryDetailcs>>(Configuration["BaseUrl"] + "Category");

        if (categories != null)
        {
            // Initialize the number of "totalPages"
            totalPages = (int)(categories.Count() / itemsPerPage);

            // Initialize the "comments" which will be displayed when the page loaded first time.
            var skipCount = itemsPerPage * (State.PageIndex - 1);
            cateorylist = categories.Skip(skipCount).Take(itemsPerPage);
        }
    }
   
    private void SelectedPage(int selectedPageIndex)
    {
        if (categories != null)
        {
            State.PageIndex = selectedPageIndex;
            var skipCount = itemsPerPage * (State.PageIndex - 1);
            cateorylist = categories.Skip(skipCount).Take(itemsPerPage);
        }
    }

}
